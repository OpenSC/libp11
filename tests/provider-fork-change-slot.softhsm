#!/bin/bash

# Copyright © 2025 Mobi - Com Polska Sp. z o.o.
# Author: Małgorzata Olszówka <Malgorzata.Olszowka@stunnel.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

outdir="output.$$"

# Load common test functions
. ${srcdir}/common.sh

if [[ "${OPENSSL_VERSION}" =~ ^[012].* ]]; then
	echo "Skipping test with OpenSSL ${OPENSSL_VERSION}"
	exit 77
fi

# Initialize SoftHSM DB
init_db

# Create 2 different tokens
init_card "token1"
init_card "token2"

# Generate an RSA key pair on the second token
generate_rsa_key_pair "pkey" "token2"

# Ensure the use of the locally built provider; applies after running 'pkcs11-tool'
unset OPENSSL_ENGINES
export OPENSSL_MODULES="../src/.libs/"
export PKCS11_MODULE_PATH=${MODULE}
echo "OPENSSL_MODULES=${OPENSSL_MODULES}"
echo "PKCS11_MODULE_PATH=${PKCS11_MODULE_PATH}"

# Load openssl settings
TEMP_LD_LIBRARY_PATH=${LD_LIBRARY_PATH}
. ${srcdir}/openssl-settings.sh

# These URIs contains the token specification
PRIVATE_KEY="pkcs11:token=token2;object=pkey;type=private;pin-value=${PIN}"

# Run the test program which will stop and wait for a signal (SIGUSR1)
# Valgrind cannot be used because the test program waits indefinitely at the sigwait call
./fork-change-slot-prov ${PRIVATE_KEY} &
pid=$!

# Restore settings
export LD_LIBRARY_PATH=${TEMP_LD_LIBRARY_PATH}

# Wait the test program to reach the sigwait
sleep 3

# Remove the first token to change the slotID associated with token2
remove_card "token1"

# Send the signal to the waiting process
kill -USR1 `pgrep -P $pid`

# Test the result
wait $pid
if [[ $? -ne 0 ]]; then
	exit 1
fi

# Cleanup
rm -rf "$outdir"

exit 0

