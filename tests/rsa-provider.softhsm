#!/bin/bash

# Copyright (C) 2015 Nikos Mavrogiannopoulos
# Copyright (C) 2019 Anderson Toshiyuki Sasaki
# Copyright (C) 2019 Red Hat, Inc.
# Copyright (C) 2021 Uri Blumenthal, MIT
# Copyright (C) 2022 Zoltan Patocs
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Note:
#   Softhsm tries to get digest algorithm from openssl, which tries
#   to get from the softhsm provider, which starts to loop again and
#   tries to get from openssl. To avoid this infinite loop, the tests
#   disable the digest functionality of the provider. Opencryptoki
#   solved the looping, hence maybe a later softhsm version would do
#   the same.

outdir="output.$$"

OPENSSL_VERSION=$(./openssl_version | cut -d ' ' -f 2)
case "${OPENSSL_VERSION}" in
3.*)
	;;
*)
    echo "Provider RSA tests skipped with OpenSSL ${OPENSSL_VERSION}"
	exit 77
	;;
esac

# Load common test functions
. ${srcdir}/rsa-common.sh

# Do the common test initialization
common_init

export OPENSSL_MODULES="../src/.libs"
export OPENSSL_CONF="${outdir}/providers.conf"

PKCS11URI_RSA="pkcs11:token=libp11-test;id=%01%02%03%04;object=server-key;type=private;pin-value=1234"

DATA_FILE="${outdir}/data.txt"
CSR_FILE="${outdir}/pkcs11_test.csr"

sed -e "s|@MODULE_PATH@|${MODULE}|g" <"${srcdir}/providers.cnf.in" >$OPENSSL_CONF

echo "something to sign" >$DATA_FILE
echo "and it has a second line too" >>$DATA_FILE

echo "log.level = DEBUG" >> "${SOFTHSM2_CONF}"
echo "slots.removable = false" >> "${SOFTHSM2_CONF}"
echo "slots.mechanisms = ALL" >> "${SOFTHSM2_CONF}"

echo "=================================="
echo "check if provider loaded correctly"
openssl list -provider pkcs11prov -providers
if test $? != 0;then
	echo "Provider library loading test failed"
	exit 1;
fi

echo "=================================="
echo "make a hash"
openssl dgst -provider pkcs11prov -sha256 $DATA_FILE
if test $? != 0;then
	echo "Hash test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "cipher encrypt"
openssl aes-256-cbc -provider pkcs11prov -pass pass:1234 -salt -in $DATA_FILE -out $DATA_FILE".cipher.encrypt"
if test $? != 0;then
	echo "Encryption test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "cipher decrypt"
openssl aes-256-cbc -provider pkcs11prov -pass pass:1234 -d -salt -in $DATA_FILE".cipher.encrypt" -out $DATA_FILE".cipher.decrypt"

# OK if we can decrypt without pkcs11 AND the resulting file is the same
openssl aes-256-cbc -provider default -pass pass:1234 -d -salt -in $DATA_FILE".cipher.encrypt" -out $DATA_FILE".cipher.no_pkcs11.decrypt"
cmp $DATA_FILE".cipher.decrypt" $DATA_FILE".cipher.no_pkcs11.decrypt"
if test $? != 0;then
	echo "Decryption test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "cipher with PBKDF2 test"
openssl aes-256-cbc -provider pkcs11prov -pass pass:1234 -nosalt -pbkdf2 -in $DATA_FILE -out $DATA_FILE".cipher.pbkdf2.encrypt"
openssl aes-256-cbc -provider pkcs11prov -pass pass:1234 -d -nosalt -pbkdf2 -in $DATA_FILE".cipher.pbkdf2.encrypt" -out $DATA_FILE".cipher.pbkdf2.decrypt"
# Try to decrypt without provider and check if results the same as with the provider
openssl aes-256-cbc -provider default -pass pass:1234 -d -nosalt -pbkdf2 -in $DATA_FILE".cipher.pbkdf2.encrypt" -out $DATA_FILE".cipher.pbkdf2.no_pkcs11.decrypt"
cmp $DATA_FILE".cipher.pbkdf2.decrypt" $DATA_FILE".cipher.pbkdf2.no_pkcs11.decrypt"
if test $? != 0;then
	echo "Encrypt + PBKDF2 test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "RSA create csr"
## This one turns off digest in libp11 and allows openssl to use the default provider for that purpose
openssl req -provider pkcs11prov -new -subj "/C=HU/O=ACME/CN=test_cert" -sha256 -key "pkcs11://"$PKCS11URI_RSA -out $CSR_FILE
if test $? != 0;then
	echo "CSR generation test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "RSA sign"
openssl pkeyutl -provider pkcs11prov -sign -inkey "pkcs11://"$PKCS11URI_RSA -in $DATA_FILE >$DATA_FILE".rsa.signature"
if test $? != 0;then
	echo "RSA signing test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "RSA verify"
openssl pkeyutl -provider pkcs11prov -verify -inkey "pkcs11://"$PKCS11URI_RSA -in $DATA_FILE -sigfile $DATA_FILE".rsa.signature"
if test $? != 0;then
	echo "RSA verfication test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "RSA encrypt"
openssl pkeyutl -provider pkcs11prov -encrypt -inkey "pkcs11://"$PKCS11URI_RSA -in $DATA_FILE >$DATA_FILE".rsa.encrypt"
if test $? != 0;then
	echo "RSA encryption test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "RSA decrypt"
openssl pkeyutl -provider pkcs11prov -decrypt -inkey "pkcs11://"$PKCS11URI_RSA -in $DATA_FILE".rsa.encrypt" >$DATA_FILE".rsa.decrypt"
if test $? != 0;then
	echo "RSA decryption test with provider library failed"
	exit 1;
fi

echo "=================================="
echo "Random number"
openssl rand -provider pkcs11prov -hex 20
if test $? != 0;then
	echo "Random number generation test with provider library failed"
	exit 1;
fi

rm -rf "$outdir"

exit 0
